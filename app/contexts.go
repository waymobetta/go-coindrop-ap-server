// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "coindrop-ap": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/waymobetta/go-coindrop-ap-server/design
// --out=$(GOPATH)/src/github.com/waymobetta/go-coindrop-ap-server
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// ShowHealthcheckContext provides the healthcheck show action context.
type ShowHealthcheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowHealthcheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the healthcheck controller show action.
func NewShowHealthcheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowHealthcheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowHealthcheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowHealthcheckContext) OK(r *Healthcheck) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.healthcheck+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowHealthcheckContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// SendPaycheckContext provides the paycheck send action context.
type SendPaycheckContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PaycheckPayload
}

// NewSendPaycheckContext parses the incoming request URL and body, performs validations and creates the
// context used by the paycheck controller send action.
func NewSendPaycheckContext(ctx context.Context, r *http.Request, service *goa.Service) (*SendPaycheckContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SendPaycheckContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SendPaycheckContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SendPaycheckContext) BadRequest(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SendPaycheckContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Gone sends a HTTP response with status code 410.
func (ctx *SendPaycheckContext) Gone(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 410, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SendPaycheckContext) InternalServerError(r *StandardError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/standard_error+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
